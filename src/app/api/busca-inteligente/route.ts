import { NextRequest, NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'
import OpenAI from 'openai'

const prisma = new PrismaClient()

// Configurar OpenAI
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY || ''
})

interface FiltrosInteligentes {
    marcas?: string[]
    modelos?: string[]
    anoMin?: number
    anoMax?: number
    precoMin?: number
    precoMax?: number
    combustivel?: string[]
    cambio?: string[]
    cores?: string[]
    categorias?: string[]
    caracteristicas?: string[]
    confianca: number
}

export async function POST(request: NextRequest) {
    try {
        const { busca } = await request.json()

        if (!busca || typeof busca !== 'string') {
            return NextResponse.json({
                success: false,
                error: 'Busca √© obrigat√≥ria'
            }, { status: 400 })
        }

        // Verificar se a API key da OpenAI est√° configurada
        if (!process.env.OPENAI_API_KEY) {
            return NextResponse.json({
                success: false,
                error: 'OpenAI API key n√£o configurada. Configure OPENAI_API_KEY no arquivo .env'
            }, { status: 500 })
        }

        console.log('ü§ñ Processando busca inteligente:', busca)

        // Buscar informa√ß√µes do banco para contexto
        const [marcasDisponiveis, modelosDisponiveis] = await Promise.all([
            prisma.veiculo.groupBy({
                by: ['marca'],
                where: { ativo_origem: true },
                _count: { marca: true },
                orderBy: { _count: { marca: 'desc' } }
            }),
            prisma.veiculo.groupBy({
                by: ['modelo'],
                where: { ativo_origem: true },
                _count: { modelo: true },
                orderBy: { _count: { modelo: 'desc' } }
            })
        ])

        // Criar prompt estruturado para a OpenAI
        const prompt = `
VOC√ä √â UM ESPECIALISTA EM VENDAS DE VE√çCULOS NO BRASIL. Sua miss√£o √© analisar a necessidade do cliente e transformar em filtros estruturados para encontrar o ve√≠culo ideal.

=== CONTEXTO DO INVENT√ÅRIO ===
MARCAS DISPON√çVEIS: ${marcasDisponiveis.map(m => m.marca).join(', ')}
MODELOS POPULARES: ${modelosDisponiveis.slice(0, 20).map(m => m.modelo).join(', ')}

=== NECESSIDADE DO CLIENTE ===
"${busca}"

=== PROCESSO DE AN√ÅLISE (PENSE PASSO A PASSO) ===

PASSO 1 - IDENTIFIQUE O PERFIL DO USU√ÅRIO:
- Fam√≠lia com filhos ‚Üí "familiar", "espa√ßoso", "seguro"
- Profissional aut√¥nomo ‚Üí "trabalho", "econ√¥mico", "confi√°vel" 
- Jovem ‚Üí "esportivo", "moderno", "tecnologia"
- Primeira compra ‚Üí "b√°sico", "econ√¥mico", "simples"
- Luxo/status ‚Üí "luxo", "premium", "diferenciado"

PASSO 2 - DETECTE SIN√îNIMOS E VARIA√á√ïES:
Marcas: Honda = Honda, VW = Volkswagen, Chevy = Chevrolet, Fiat = Fiat, GM = Chevrolet, Toyota = Toyota, Renault = Renault, Nissan = Nissan, Hyundai = Hyundai, Kia = Kia, Ford = Ford, Peugeot = Peugeot, Citro√´n = Citroen

Modelos: Civic = CIVIC, Corolla = COROLLA, Golf = GOLF, Polo = POLO, Up = UP!, Gol = GOL, Fiesta = FIESTA, Ka = KA, Onix = ONIX, Prisma = PRISMA, HB20 = HB20, Creta = CRETA, Kicks = KICKS, Captur = CAPTUR, HR-V = HR-V, T-Cross = T-CROSS

Categorias: SUV = utilit√°rio esportivo, crossover, 4x4, todo terreno / Sedan = sed√£, 4 portas / Hatch = hatchback, compacto, 2 ou 4 portas / Pickup = picape, caminhonete / Wagon = perua, familiar

PASSO 3 - INTERPRETE EXPRESS√ïES TEMPORAIS:
- "novo", "zero km" ‚Üí ano atual (2024/2025)
- "2020 em diante", "a partir de 2020" ‚Üí anoMin: 2020
- "at√© 2018", "anterior a 2019" ‚Üí anoMax: 2018
- "entre 2018 e 2022" ‚Üí anoMin: 2018, anoMax: 2022
- "recente", "novo" ‚Üí anoMin: 2020
‚ö†Ô∏è IMPORTANTE: N√ÉO infira express√µes temporais apenas por contexto (trabalho, fam√≠lia, etc). S√≥ aplique filtros de pre√ßo se o usu√°rio mencionar EXPLICITAMENTE valores ou termos financeiros.


PASSO 4 - DECODIFIQUE VALORES FINANCEIROS (APENAS SE EXPLICITAMENTE MENCIONADOS):
- "at√© 30 mil", "m√°ximo 30k", "no m√°ximo R$ 30.000" ‚Üí precoMax: 30000
- "acima de 50k", "mais de 50 mil" ‚Üí precoMin: 50000
- "entre 40 e 60 mil" ‚Üí precoMin: 40000, precoMax: 60000
- "barato", "em conta", "valor baixo" ‚Üí precoMax: 40000
- "premium", "caro", "valor alto" ‚Üí precoMin: 80000
üö® REGRA CR√çTICA: NUNCA adicione filtros de pre√ßo (precoMin/precoMax) a menos que o usu√°rio mencione EXPLICITAMENTE:
- Valores espec√≠ficos: "at√© 50 mil", "m√°ximo 30k", "entre 40 e 60k"
- Termos financeiros diretos: "barato", "caro", "premium", "valor baixo", "valor alto"
- N√ÉO inferir pre√ßos por contexto como: trabalho, fam√≠lia, primeiro carro, jovem, etc.
- Se houver d√∫vida, N√ÉO aplique filtro de pre√ßo.

PASSO 5 - IDENTIFIQUE CARACTER√çSTICAS T√âCNICAS:
Combust√≠vel:
- "econ√¥mico", "gasta pouco", "economia" ‚Üí FLEX
- "potente", "performance" ‚Üí GASOLINA
- "diesel", "a diesel" ‚Üí DIESEL
- "h√≠brido", "sustent√°vel" ‚Üí HIBRIDO
- "el√©trico" ‚Üí ELETRICO

C√¢mbio:
- "autom√°tico", "sem embreagem", "dire√ß√£o suave" ‚Üí AUTOMATICO, CVT
- "manual", "com embreagem" ‚Üí MANUAL
- "CVT", "continuamente vari√°vel" ‚Üí CVT

PASSO 6 - CONTEXTUALIZE PARA USO BRASILEIRO:
- "para cidade" ‚Üí hatch, econ√¥mico, compacto
- "para estrada" ‚Üí sedan, mais potente
- "para fam√≠lia" ‚Üí SUV, wagon, espa√ßoso, seguro
- "primeiro carro" ‚Üí b√°sico, econ√¥mico, confi√°vel
- "para trabalho" ‚Üí econ√¥mico, resistente, baixa manuten√ß√£o
- "uber/app" ‚Üí sedan, econ√¥mico, confort√°vel, 4 portas

PASSO 7 - ANALISE CONTEXTO EMOCIONAL:
- "sonho", "sempre quis" ‚Üí marca/modelo espec√≠fico mencionado
- "necessidade", "preciso" ‚Üí funcionalidade priorit√°ria
- "urgente" ‚Üí disponibilidade imediata
- "investimento" ‚Üí foco em valor de revenda

PASSO 8 - CONSIDERE PADR√ïES REGIONAIS BRASILEIROS:
- Autom√°tico √© premium no Brasil ‚Üí maior pre√ßo esperado
- FLEX √© padr√£o ‚Üí economia priorit√°ria
- SUV = status + fam√≠lia
- Sedan = Uber/executivo
- Hatch = juventude/economia

=== FORMATO DE RESPOSTA (APENAS JSON) ===
{
  "marcas": ["array de marcas em MAI√öSCULO"],
  "modelos": ["array de modelos em MAI√öSCULO"],
  "anoMin": n√∫mero ou null,
  "anoMax": n√∫mero ou null,
  "precoMin": n√∫mero ou null (‚ö†Ô∏è APENAS se valor expl√≠cito mencionado),
  "precoMax": n√∫mero ou null (‚ö†Ô∏è APENAS se valor expl√≠cito mencionado),
  "combustivel": ["FLEX", "GASOLINA", "DIESEL", "HIBRIDO", "ELETRICO"],
  "cambio": ["MANUAL", "AUTOMATICO", "CVT"],
  "cores": ["cores em MAI√öSCULO se mencionadas"],
  "categorias": ["SUV", "SEDAN", "HATCH", "PICKUP", "WAGON"],
  "caracteristicas": ["economico", "familiar", "esportivo", "luxo", "trabalho", "primeiro_carro", "cidade", "estrada"],
  "confianca": n√∫mero de 0 a 100 (baseado na especificidade da busca)
}

üö® LEMBRE-SE: precoMin e precoMax devem ser null se o usu√°rio N√ÉO mencionar valores expl√≠citos!

=== EXEMPLOS DETALHADOS DE AN√ÅLISE ===

ENTRADA: "Preciso de um carro para a fam√≠lia, espa√ßoso e seguro, at√© 80 mil"
AN√ÅLISE PASSO A PASSO:
- Perfil: Fam√≠lia com filhos
- Caracter√≠sticas: espa√ßoso = SUV/WAGON, seguro = familiar
- Limite financeiro: at√© 80k = precoMax: 80000
- Confian√ßa: Alta (especificou uso, caracter√≠sticas e or√ßamento)
SA√çDA: {"categorias": ["SUV", "WAGON"], "caracteristicas": ["familiar"], "precoMax": 80000, "confianca": 90}

ENTRADA: "Honda Civic 2020 autom√°tico prata"
AN√ÅLISE PASSO A PASSO:
- Marca espec√≠fica: Honda
- Modelo espec√≠fico: Civic
- Ano espec√≠fico: 2020 em diante
- C√¢mbio espec√≠fico: autom√°tico (inclui CVT)
- Cor espec√≠fica: prata
- Confian√ßa: Muito alta (todos detalhes espec√≠ficos)
SA√çDA: {"marcas": ["HONDA"], "modelos": ["CIVIC"], "anoMin": 2020, "cambio": ["AUTOMATICO", "CVT"], "cores": ["PRATA"], "confianca": 95}

ENTRADA: "Carro econ√¥mico para trabalhar de Uber"
AN√ÅLISE PASSO A PASSO:
- Uso espec√≠fico: trabalho + Uber
- Uber requer: sedan (4 portas), confort√°vel, econ√¥mico
- Econ√¥mico = FLEX, baixo consumo
- N√£o menciona valor espec√≠fico = N√ÉO aplicar filtro de pre√ßo
- Confian√ßa: Boa (uso claro, mas sem especifica√ß√µes t√©cnicas)
SA√çDA: {"combustivel": ["FLEX"], "categorias": ["SEDAN"], "caracteristicas": ["trabalho", "economico"], "confianca": 85}

ENTRADA: "SUV compacto, branco, 2021 em diante, autom√°tico"
AN√ÅLISE PASSO A PASSO:
- Categoria espec√≠fica: SUV
- Tamanho: compacto (n√£o full-size)
- Cor espec√≠fica: branco
- Per√≠odo: 2021 em diante
- C√¢mbio: autom√°tico
- Confian√ßa: Muito alta (m√∫ltiplos crit√©rios espec√≠ficos)
SA√çDA: {"categorias": ["SUV"], "cores": ["BRANCO"], "anoMin": 2021, "cambio": ["AUTOMATICO", "CVT"], "confianca": 92}

ENTRADA: "Primeiro carro, algo simples e que gaste pouco"
AN√ÅLISE PASSO A PASSO:
- Perfil: primeira compra
- Simplicidade = hatch b√°sico, sem muitos equipamentos
- Gasta pouco = FLEX, baixo consumo (mas n√£o menciona valor espec√≠fico)
- N√£o aplica filtro de pre√ßo pois usu√°rio n√£o menciona valor
- Confian√ßa: Boa (perfil claro, mas gen√©rico)
SA√çDA: {"combustivel": ["FLEX"], "categorias": ["HATCH"], "caracteristicas": ["primeiro_carro", "economico"], "confianca": 80}

ENTRADA: "Carro para trabalho, at√© 50 mil reais"
AN√ÅLISE PASSO A PASSO:
- Uso: trabalho
- Valor expl√≠cito: "at√© 50 mil" = precoMax: 50000
- Trabalho sugere: econ√¥mico, confi√°vel
- Confian√ßa: Alta (uso claro e or√ßamento definido)
SA√çDA: {"caracteristicas": ["trabalho", "economico"], "precoMax": 50000, "confianca": 90}

ENTRADA: "Quero um carro potente para estrada, tipo um Camaro"
AN√ÅLISE PASSO A PASSO:
- Uso: estrada (performance priorit√°ria)
- Potente = gasolina, esportivo
- Camaro = refer√™ncia de esportivo (marca Chevrolet)
- Estrada = preferencialmente sedan ou cup√™
- Confian√ßa: Alta (uso e refer√™ncia espec√≠ficos)
SA√çDA: {"combustivel": ["GASOLINA"], "caracteristicas": ["esportivo", "estrada"], "categorias": ["SEDAN"], "precoMin": 60000, "confianca": 88}

AGORA ANALISE A BUSCA DO CLIENTE E RETORNE APENAS O JSON ESTRUTURADO:`

        // Fazer chamada para a OpenAI
        const completion = await openai.chat.completions.create({
            model: "gpt-3.5-turbo",
            messages: [
                {
                    role: "system",
                    content: "Voc√™ √© um especialista brasileiro em an√°lise de buscas de ve√≠culos. Siga EXATAMENTE o processo passo a passo e retorne APENAS JSON v√°lido, sem explica√ß√µes adicionais. Pense como um vendedor experiente que entende as necessidades dos clientes brasileiros."
                },
                {
                    role: "user",
                    content: prompt
                }
            ],
            temperature: 0.1,
            max_tokens: 800
        })

        const resposta = completion.choices[0]?.message?.content
        if (!resposta) {
            throw new Error('Resposta vazia da OpenAI')
        }

        console.log('ü§ñ Resposta da OpenAI:', resposta)

        // Tentar parsear a resposta JSON
        let filtros: FiltrosInteligentes
        try {
            filtros = JSON.parse(resposta)
        } catch (error) {
            console.error('‚ùå Erro ao parsear JSON da OpenAI:', error)
            throw new Error('Resposta inv√°lida da OpenAI')
        }

        // Construir query para o banco de dados
        const whereClause: Record<string, unknown> = {
            ativo_origem: true
        }

        // Aplicar filtros extra√≠dos
        if (filtros.marcas && filtros.marcas.length > 0) {
            whereClause.marca = { in: filtros.marcas }
        }

        if (filtros.modelos && filtros.modelos.length > 0) {
            whereClause.modelo = { in: filtros.modelos }
        }

        if (filtros.anoMin || filtros.anoMax) {
            whereClause.ano = {}
            if (filtros.anoMin) (whereClause.ano as Record<string, number>).gte = filtros.anoMin
            if (filtros.anoMax) (whereClause.ano as Record<string, number>).lte = filtros.anoMax
        }

        if (filtros.precoMin || filtros.precoMax) {
            whereClause.preco = {}
            if (filtros.precoMin) (whereClause.preco as Record<string, number>).gte = filtros.precoMin
            if (filtros.precoMax) (whereClause.preco as Record<string, number>).lte = filtros.precoMax
        }

        if (filtros.combustivel && filtros.combustivel.length > 0) {
            whereClause.combustivel = { in: filtros.combustivel }
        }

        if (filtros.cambio && filtros.cambio.length > 0) {
            whereClause.cambio = { in: filtros.cambio }
        }

        if (filtros.cores && filtros.cores.length > 0) {
            whereClause.cor = { in: filtros.cores.map(c => c.toUpperCase()) }
        }

        // Buscar ve√≠culos no banco
        const veiculos = await prisma.veiculo.findMany({
            where: whereClause,
            orderBy: [
                { destaque: 'desc' },
                { preco: 'asc' }
            ],
            take: 20 // Limitar resultados
        })

        console.log(`‚úÖ Encontrados ${veiculos.length} ve√≠culos para a busca: "${busca}"`)

        return NextResponse.json({
            success: true,
            data: {
                veiculos,
                filtros_aplicados: filtros,
                busca_original: busca,
                total_encontrados: veiculos.length,
                interpretacao: {
                    confianca: filtros.confianca,
                    filtros_ativos: Object.keys(filtros).filter(key => {
                        const valor = filtros[key as keyof FiltrosInteligentes]
                        return valor && (Array.isArray(valor) ? valor.length > 0 : valor !== null)
                    })
                }
            }
        })

    } catch (error) {
        console.error('‚ùå Erro na busca inteligente:', error)

        return NextResponse.json({
            success: false,
            error: 'Erro ao processar busca inteligente',
            details: error instanceof Error ? error.message : 'Erro desconhecido'
        }, { status: 500 })
    }
}

// GET - Endpoint para testar configura√ß√£o
export async function GET() {
    const temApiKey = !!process.env.OPENAI_API_KEY

    return NextResponse.json({
        success: true,
        message: 'Endpoint de busca inteligente',
        configurado: temApiKey,
        modelo: 'gpt-3.5-turbo',
        funcionalidades: [
            'Interpreta√ß√£o de linguagem natural',
            'Extra√ß√£o de filtros estruturados',
            'Busca contextual no banco de dados',
            'An√°lise de confian√ßa da interpreta√ß√£o'
        ]
    })
} 